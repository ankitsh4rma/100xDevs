/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const fs = require('fs')
  //const bodyParser = require('body-parser');
  const app = express();
  
  app.use(express.json());

  app.get('/todos', (req, res) => {
    fs.readFile('./todos.json','utf-8',(error, data) => {
      let todosJson;
      if(error)
        res.status(500).send("Error: something wrong happened while reading the todos dB json file")
      todosJson = JSON.parse(data)
      res.status(200).json(todosJson)
    })
  })

  app.get('/todos/:id',(req, res) => {
    fs.readFile('./todos.json','utf-8',(error,data) => {
      if(error)
        res.status(500).send("Error: something wrong happened while reading the todos DB json file")
      let todosJson = JSON.parse(data)
      const id = req.params.id
      if(!(id in todosJson))
        res.status(404).send(`Requested To-do with id ${id} not in the DB. Give the To-do valid id`)
      else
        res.status(200).json(todosJson[id.toString()])
    })
  })

  app.post('/todos',(req, res) => {
    let body = req.body
    let todosJson
    let uniqueId
    todosJson = fs.readFileSync('./todos.json','utf-8')
    todosJson = JSON.parse(todosJson)
    uniqueId = Date.now().toString() + Math.random().toString().slice(-2,)
    while((uniqueId in todosJson)){
      uniqueId = Date.now().toString() + Math.random().toString().slice(-2,)
    }

    body['id'] = uniqueId
    todosJson[uniqueId] = body
    fs.writeFile('./todos.json',JSON.stringify(todosJson),'utf-8',(error) => {
      if(error)
        res.status(500).send("Error: Encoundering an error while storing the todo on json DB")
      res.status(201).json({id: uniqueId})
    })
  })

  app.put('/todos/:id',(req,res) => {
    let body = req.body
    console.log(body)
    //body = JSON.parse(body)
    let id = req.params.id
    let todosJson = fs.readFileSync('./todos.json','utf-8')
    todosJson = JSON.parse(todosJson)
    if(!(id in todosJson))
      res.status(404).send("ID not found")
    for (const i of Object.keys(body)) {
      todosJson[id][i] = body[i]
    }
    fs.writeFileSync('./todos.json',JSON.stringify(todosJson),'utf-8')
    res.status(200).send("To-Do Updated Succesfully")
  })

  app.delete('/todos/:id',(req,res) => {
    let id = req.params.id
    let todosJson = fs.readFileSync('./todos.json','utf-8')
    todosJson = JSON.parse(todosJson)
    if(!(id in todosJson))
      res.status(404).send("ID not found")
    delete todosJson[id]
    fs.writeFileSync('./todos.json',JSON.stringify(todosJson),'utf-8')
    res.status(200).send("To-Do Deleted Succesfully")
  })
  
  app.get('*',(req,res) => {
    res.status(404).send("Route Not Found")
  })

  app.listen('3000',() => {
    console.log("The server is listening at port 3000");
  })
  
  module.exports = app;